# Copyright (C) 2020 ditekshen
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

try:
    import re2 as re
except ImportError:
    import re

from lib.cuckoo.common.abstracts import Signature

class KoadicAPIs(Signature):
    name = "koadic_apis"
    description = "Exhibits behavior characteristics of Koadic post-exploitation framework"
    severity = 3
    categories = ["exploitation"]
    families = ["Koadic"]
    authors = ["ditekshen"]
    minimum = "1.3"
    evented = True

    filter_apinames = set(["CreateProcessInternalW", "NtCreateUserProcess", "ShellExecuteExW", "NtWriteFile"])

    def __init__(self, *args, **kwargs):
        Signature.__init__(self, *args, **kwargs)
        self.score = int()
        self.patterns = [
            re.compile('.*cmd(\.exe)?\s\/q\s\/c\schcp\s\d+\s&\swhoami\s/all\s1>.*\.txt\s2>&1$'),
            re.compile('.*cmd(\.exe)?\s\/q\s\/c\schcp\s\d+\s&\sroute\sPRINT\s1>.*\.txt\s2>&1$'),
            re.compile('.*cmd(\.exe)?\s\/q\s\/c\schcp\s\d+\s&\shostname\s1>.*\.txt\s2>&1$'),
            re.compile('.*cmd(\.exe)?\s\/q\s\/c\schcp\s\d+\s&\scd\s1>.*\.txt\s2>&1$'),
            re.compile('.*cmd(\.exe)?\s\/q\s\/c\schcp\s.*'),
        ]

    def on_call(self, call, process):
        processname = process["process_name"].lower()
        if processname == "mshta.exe" or processname == "rundll32.exe":
            if call["api"] == "NtCreateUserProcess" or call["api"] == "CreateProcessInternalW":
                cmdline = self.get_argument(call, "CommandLine")
                if cmdline:
                    for pat in self.patterns:
                        if re.match(pat, cmdline):
                            self.score += 1
                            self.data.append({"cmdline": cmdline})

            if call["api"] == "ShellExecuteExW":
                show = self.get_argument(call, "Show")
                param = self.get_argument(call, "Parameters")
                if show and param:
                    if int(show, 10) == 0:
                        for pat in self.patterns:
                            if re.match(pat, param):
                                self.score += 1
                                self.data.append({"parameter": param})

            if call["api"] == "NtWriteFile" and processname == "rundll32.exe" and self.score > 3:
                buff = self.get_argument(call, "CommandLine")
                handle = self.get_argument(call, "HandleName")
                if buff:
                    if buff.startswith("MZ"):
                        self.score += 2
                        self.data.append({"payload": handle})
    
    def on_complete(self):
        if self.score >= 3:
            return True

        return False

class KoadicNetworkActivity(Signature):
    name = "koadic_network_activity"
    description = "Establishes network traffic characteristics of Koadic post-exploitation framework"
    severity = 3
    categories = ["exploitation"]
    families = ["Koadic"]
    authors = ["ditekshen"]
    minimum = "1.3"
    evented = True

    filter_apinames = set(["WinHttpOpenRequest", "HttpOpenRequestW"])

    def __init__(self, *args, **kwargs):
        Signature.__init__(self, *args, **kwargs)
        self.score = int()

    def on_call(self, call, process):
        if call["api"] == "HttpOpenRequestW":
            verb = self.get_argument(call, "Verb")
            path = self.get_argument(call, "path")
            if verb and path:
                if verb == "GET" and path.endswith("\./mshtml,RunHTMLApplication"):
                    self.score += 1

        if call["api"] == "WinHttpOpenRequest":
            verb = self.get_argument(call, "Verb")
            obj = self.get_argument(call, "ObjectName")
            if verb and obj:
                if verb == "POST" and obj.endswith("=stage;"):
                    self.score += 1
    
    def on_complete(self):
        if self.score >= 2:
            return True

        return False
