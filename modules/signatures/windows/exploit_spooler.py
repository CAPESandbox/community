# Copyright (C) 2021 bartblaze
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from lib.cuckoo.common.abstracts import Signature


class SpoolerSvcStart(Signature):
    name = "spooler_svc_start"
    description = "Executes the printer spooler process"
    severity = 2
    categories = ["command"]
    authors = ["bartblaze"]
    minimum = "1.3"

    evented = True

    def run(self):
        spooler = [
            "spoolsv.exe",
        ]

        ret = False
        for cmdline in self.results.get("behavior", {}).get("summary", {}).get("executed_commands", []):
            lower = cmdline.lower()
            for spool in spooler:
                if spool in lower:
                    ret = True
                    self.data.append({"command": cmdline})

        return ret


class SpoolerAccess(Signature):
    name = "spooler_access"
    description = "Writes to the spooler folder, potential vulnerability or printer driver install"
    severity = 3
    categories = ["evasion"]
    authors = ["bartblaze"]
    minimum = "0.5"

    def run(self):
        indicators = [
            r".*\\Windows\\System32\\spool\\.*",
        ]

        for indicator in indicators:
            match = self.check_write_file(pattern=indicator, regex=True)
            if match:
                self.data.append({"file": match})
                return True

        return False


class EscalatePrivilegeViaNTLMRelay(Signature):
    name = "escalate_privilege_via_ntlm_relay"
    description = "Attempts to coerce a local NTLM authentication via HTTP using Printer Spooler service as a target"
    severity = 3
    categories = ["bypass"]
    authors = ["@para0x0dise"]
    minimum = "1.2"
    ttps = ["T1068"]
    references = [
        "https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/privilege_escalation_privilege_escalation_via_ntlmrelay2self.toml"
    ]
    evented = True

    def run(self):
        for cmdline in self.results.get("behavior", {}).get("summary", {}).get("executed_commands", []):
            lower = cmdline.lower()

            if (
                "rundll32.exe" in lower
                and any(arg in lower for arg in ("davclnt.dll,davsetcookie"))
                and any(arg in lower for arg in ("/print/pipe/", "/pipe/spoolss", "/pipe/srvsvc"))
            ):
                return True
        return False
