# CAPE - Config And Payload Extraction
# Copyright(C) 2018 redsand (redsand@redsand.net)
# 
# This program is free software : you can redistribute it and / or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.If not, see <http://www.gnu.org/licenses/>.

from lib.cuckoo.common.abstracts import Signature

class exploit_getbasekerneladdress(Signature):
    name = "exploit_getbasekerneladdress"
    description = "Exploit detected: Get Kernel Base Memory Address (PsInitialSystemProcess)"
    severity = 3
    categories = ["exploit"]
    authors = ["redsand"]
    minimum = "1.3"
    evented = True

    def __init__(self, *args, **kwargs):
        Signature.__init__(self, *args, **kwargs)
        self.dll_loaded = False
        self.loadctr = 0
        self.list = []

    filter_apinames = set(["LdrGetProcedureAddress", "LdrLoadDll", "EnumDeviceDrivers", "K32EnumDeviceDrivers"])

    def on_call(self, call, process):
        if call["api"] == "LdrLoadDll" and self.get_argument(call, "FileName").lower() == "ntkrnlpa.exe":
            self.dll_loaded = True
        elif self.dll_loaded and call["api"] == "LdrGetProcedureAddress" and self.get_argument(call, "FileName").lower() == "PsInitialSystemProcess":
            self.loadctr += 1
            self.data.append({"KernelExploitBase" : "%s/%s" % (self.get_argument(call, "ModuleName"), self.get_argument(call, "FunctionName"))})
        elif call["api"] == "EnumDeviceDrivers" or call["api"] == "K32EnumDeviceDrivers":
            self.loadctr += 1

    def on_complete(self):
        if self.loadctr > 1:
            # both EnumDeviceDrivers/K32EnumDeviceDrivers and PsInitialSystemProcess were called, able to calculate PsInitialSystemProcess offset
            return True
        else:
            return False

