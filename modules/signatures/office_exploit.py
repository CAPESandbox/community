# Copyright (C) 2018 Kevin Ross
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from lib.cuckoo.common.abstracts import Signature

class OfficeCVE201711882(Signature):
    name = "office_cve2017_11882"
    description = "The EQNEDT32 equation process created a child process likely indicative of CVE-2017-11882 Office exploit"
    severity = 3
    confidence = 100
    categories = ["exploit", "office"]
    authors = ["Kevin Ross"]
    minimum = "1.3"
    evented = True
    ttp = ["T1203"]

    def __init__(self, *args, **kwargs):
        Signature.__init__(self, *args, **kwargs)
        self.data = []

    filter_apinames = set(["CreateProcessInternalW"])
    filter_analysistypes = set(["file"])

    def on_call(self, call, process):
        pname = process["process_name"].lower()
        if pname == "eqnedt32.exe":
            if call["api"] == "CreateProcessInternalW":
                buff = self.get_argument(call, "CommandLine")
                self.data.append({"created_process": buff })

    def on_complete(self):
        if self.data:
            return True
        else:
            return False

class OfficeFlashLoad(Signature):
    name = "office_flash_load"
    description = "Flash was loaded by Microsoft Office which could be indicative of an embedded Flash exploit"
    severity = 3
    confidence = 80
    categories = ["exploit", "office"]
    authors = ["Kevin Ross"]
    minimum = "1.3"
    evented = True
    match = True

    def __init__(self, *args, **kwargs):
        Signature.__init__(self, *args, **kwargs)
        self.pids = []
        self.officeprocs = [
        "excel.exe",
        "powerpnt.exe",
        "winword.exe",
        ]

    filter_apinames = set(["CoCreateInstance", "CoGetClassObject"])

    def on_call(self, call, process):
        pname = process["process_name"]
        pid = process["process_id"]
        if pname.lower() in self.officeprocs:
            progid = self.get_argument(call, "ProgID").lower()
            if progid.startswith("shockwaveflash.shockwaveflash."):
                if pid not in self.pids:
                    self.pids.append(pid)
                    self.data.append({"flash load": "%s pid %s loaded Flash" % (pname,pid)})

    def on_complete(self):
        if self.data:
            return True
        else:
            return False

class OfficePostScript(Signature):
    name = "office_postscript"
    description = "Microsoft Word created a PostScript file possibly indicative of an exploit"
    severity = 3
    confidence = 90
    categories = ["exploit", "office"]
    authors = ["Kevin Ross"]
    minimum = "1.3"
    evented = True
    match = True
    references = ["www.fireeye.com/content/dam/fireeye-www/blog/pdfs/twoforonefinal.pdf"]

    def __init__(self, *args, **kwargs):
        Signature.__init__(self, *args, **kwargs)
        self.handles = []

    filter_apinames = set(["NtWriteFile"])

    def on_call(self, call, process):
        pname = process["process_name"]
        pid = process["process_id"]
        if pname.lower() == "winword.exe":
            buf = self.get_argument(call, "Buffer")
            handle = self.get_argument(call, "HandleName")
            if buf.startswith("%!PS-"):
                if handle not in self.handles:
                    self.handles.append(handle)
                    self.data.append({"postscript": "%s pid %s created postscript file %s" % (pname,pid,handle)})

    def on_complete(self):
        if self.data:
            return True
        else:
            return False
